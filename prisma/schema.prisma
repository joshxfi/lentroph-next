generator client {
    provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

generator pothos {
    provider = "prisma-pothos-types"
}

datasource db {
    provider     = "sqlite"
    url          = "file:./dev.db"
    relationMode = "prisma"
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    username      String?        @unique
    createdAt     DateTime       @default(now())
    updatedAt     DateTime?      @updatedAt
    bio           String?
    posts         Post[]
    accounts      Account[]
    sessions      Session[]
    orgs          Organization[]
    donations     Donation[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Organization {
    id         String    @id @default(cuid())
    name       String
    image      String?
    bio        String
    username   String    @unique
    isApproved Boolean   @default(false)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime? @updatedAt
    ownerId    String

    owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    donations Donation[]
    posts     Post[]

    @@index([ownerId])
}

model Donation {
    id        String    @id @default(cuid())
    amount    Int
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    orgId     String
    userId    String

    org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
    user User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([orgId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id          String   @id
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    content     String
    imgUrl      String?
    upvotes     Upvote[]
    tags        Tag[]
    sdg         String?

    authorId String?
    author   User?   @relation(fields: [authorId], references: [id])

    orgId String?
    org   Organization? @relation(fields: [orgId], references: [id])

    parentId String?
    parent   Post?   @relation("PostComments", fields: [parentId], references: [id], onUpdate: Restrict, onDelete: Restrict)
    comments Post[]  @relation("PostComments")

    @@index([parentId, createdAt(sort: Desc)])
    @@index([orgId, parentId, createdAt(sort: Desc)])
    @@index([authorId, parentId, createdAt(sort: Desc)])
}

model Upvote {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    userId    String

    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([postId])
}

model Tag {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    posts     Post[]
}
